name: SAP BTP Auto Start

on:
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * *'

jobs:
  start-apps:
    name: Start SAP BTP Applications
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Create scripts directory and files
      run: |
        # 创建 scripts 目录
        mkdir -p scripts
        
        # 创建主脚本文件
        cat > scripts/cf-autostart.py << 'EOF'
        #!/usr/bin/env python3
        import requests
        import base64
        import json
        import time
        import os
        
        class TelegramNotifier:
            def __init__(self):
                self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
                self.chat_id = os.getenv('TELEGRAM_CHAT_ID')
                self.enabled = bool(self.bot_token and self.chat_id)
                
                if self.enabled:
                    print("✅ Telegram 通知已启用")
                else:
                    print("ℹ️ Telegram 通知未配置")
            
            def send_message(self, message, parse_mode='HTML'):
                if not self.enabled:
                    return False
                    
                try:
                    url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
                    payload = {
                        'chat_id': self.chat_id,
                        'text': message,
                        'parse_mode': parse_mode,
                        'disable_web_page_preview': True
                    }
                    
                    response = requests.post(url, json=payload, timeout=10)
                    return response.status_code == 200
                except Exception:
                    return False
            
            def send_startup_notification(self, account_count, app_count):
                if not self.enabled:
                    return
                    
                message = f"🚀 <b>SAP BTP 自动启动开始</b>\n\n"
                message += f"📊 账号数量: {account_count}\n"
                message += f"📱 应用数量: {app_count}\n"
                message += f"⏰ 开始时间: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                
                self.send_message(message)
            
            def send_result_notification(self, results):
                if not self.enabled:
                    return
                    
                total_success = sum(result['success'] for result in results)
                total_apps = sum(result['total'] for result in results)
                
                message = f"📊 <b>SAP BTP 启动结果</b>\n\n"
                message += f"✅ 成功: {total_success}/{total_apps}\n"
                message += f"⏰ 完成时间: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                
                for i, result in enumerate(results, 1):
                    status_emoji = "✅" if result['success'] == result['total'] else "⚠️"
                    message += f"<b>账号 {i}:</b> {status_emoji} {result['success']}/{result['total']}\n"
                
                if total_success == total_apps:
                    message += "\n🎉 <b>所有应用启动成功！</b>"
                else:
                    message += f"\n❌ <b>有 {total_apps - total_success} 个应用启动失败</b>"
                
                self.send_message(message)
        
        telegram_notifier = TelegramNotifier()
        
        def get_config():
            accounts = []
            
            # 账号1配置
            if os.getenv('CF_USERNAME_1'):
                accounts.append({
                    "username": os.getenv('CF_USERNAME_1'),
                    "password": os.getenv('CF_PASSWORD_1', ''),
                    "api_endpoint": os.getenv('CF_API_ENDPOINT_1', 'https://api.cf.ap21.hana.ondemand.com'),
                    "org": os.getenv('CF_ORG_1', ''),
                    "space": os.getenv('CF_SPACE_1', 'dev'),
                    "apps": [app.strip() for app in os.getenv('CF_APPS_1', '').split(',') if app.strip()]
                })
            
            # 账号2配置
            if os.getenv('CF_USERNAME_2'):
                accounts.append({
                    "username": os.getenv('CF_USERNAME_2'),
                    "password": os.getenv('CF_PASSWORD_2', ''),
                    "api_endpoint": os.getenv('CF_API_ENDPOINT_2', 'https://api.cf.ap21.hana.ondemand.com'),
                    "org": os.getenv('CF_ORG_2', ''),
                    "space": os.getenv('CF_SPACE_2', 'dev'),
                    "apps": [app.strip() for app in os.getenv('CF_APPS_2', '').split(',') if app.strip()]
                })
            
            return accounts
        
        class CFMobileClient:
            def __init__(self):
                self.session = requests.Session()
                self.session.headers.update({
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                })
                self.api_endpoint = None
                
            def discover_auth_endpoint(self, api_endpoint):
                try:
                    response = self.session.get(f"{api_endpoint}/v2/info", timeout=15)
                    if response.status_code == 200:
                        return response.json().get("authorization_endpoint", "")
                except Exception:
                    return None
            
            def login(self, username, password, api_endpoint):
                print(f"🔐 正在登录: {username}")
                self.api_endpoint = api_endpoint
                auth_endpoint = self.discover_auth_endpoint(api_endpoint)
                if not auth_endpoint:
                    return False
                
                try:
                    token_url = f"{auth_endpoint}/oauth/token"
                    auth_str = "cf:"
                    encoded_auth = base64.b64encode(auth_str.encode()).decode()
                    headers = {
                        "Authorization": f"Basic {encoded_auth}", 
                        "Content-Type": "application/x-www-form-urlencoded"
                    }
                    data = {
                        "grant_type": "password", 
                        "username": username, 
                        "password": password
                    }
                    
                    response = self.session.post(token_url, headers=headers, data=data, timeout=30)
                    
                    if response.status_code == 200:
                        access_token = response.json()["access_token"]
                        self.session.headers.update({"Authorization": f"Bearer {access_token}"})
                        print("✅ 登录成功！")
                        return True
                    else:
                        print(f"❌ 认证失败: {response.status_code}")
                        return False
                except Exception as e:
                    print(f"⚠️ 登录过程中出错: {e}")
                    return False
        
            def get_org_guid(self, org_name):
                try:
                    response = self.session.get(f"{self.api_endpoint}/v3/organizations?names={org_name}", timeout=15)
                    if response.status_code == 200:
                        data = response.json()
                        if data["resources"]:
                            return data["resources"][0]["guid"]
                except Exception:
                    return None
        
            def get_space_guid(self, org_guid, space_name):
                try:
                    response = self.session.get(
                        f"{self.api_endpoint}/v3/spaces?names={space_name}&organization_guids={org_guid}", 
                        timeout=15
                    )
                    if response.status_code == 200:
                        data = response.json()
                        if data["resources"]:
                            return data["resources"][0]["guid"]
                except Exception:
                    return None
        
            def get_app_guid(self, app_name, space_guid):
                try:
                    response = self.session.get(
                        f"{self.api_endpoint}/v3/apps?names={app_name}&space_guids={space_guid}", 
                        timeout=15
                    )
                    if response.status_code == 200:
                        data = response.json()
                        if data["resources"]:
                            return data["resources"][0]["guid"]
                except Exception:
                    return None
        
            def get_app_status(self, app_guid):
                try:
                    response = self.session.get(f"{self.api_endpoint}/v3/apps/{app_guid}", timeout=15)
                    if response.status_code == 200:
                        return response.json().get("state", "UNKNOWN")
                except Exception:
                    return None
        
            def start_application(self, app_guid, app_name):
                try:
                    response = self.session.post(
                        f"{self.api_endpoint}/v3/apps/{app_guid}/actions/start", 
                        timeout=30
                    )
                    return response.status_code in [200, 201]
                except Exception:
                    return False
        
            def wait_for_app_start(self, app_guid, app_name, max_wait=120):
                start_time = time.time()
                while time.time() - start_time < max_wait:
                    status = self.get_app_status(app_guid)
                    if status == "STARTED":
                        return True
                    elif status == "STOPPED":
                        return False
                    time.sleep(3)
                return False
        
        def main():
            print("🚀 Cloud Foundry 应用启动管理工具")
            print("=" * 50)
            
            client = CFMobileClient()
            ACCOUNTS = get_config()
            total_success = 0
            total_apps = 0
            results = []
            
            account_count = len(ACCOUNTS)
            app_count = sum(len(account['apps']) for account in ACCOUNTS)
            telegram_notifier.send_startup_notification(account_count, app_count)
            
            for account in ACCOUNTS:
                print(f"\n{'='*40}")
                print(f"处理账号: {account['username']}")
                print(f"{'='*40}")
                
                account_success = 0
                account_apps = len(account['apps'])
                
                if not client.login(account['username'], account['password'], account['api_endpoint']):
                    results.append({'username': account['username'], 'success': 0, 'total': account_apps})
                    continue
                    
                org_guid = client.get_org_guid(account['org'])
                if not org_guid:
                    results.append({'username': account['username'], 'success': 0, 'total': account_apps})
                    continue
                    
                space_guid = client.get_space_guid(org_guid, account['space'])
                if not space_guid:
                    results.append({'username': account['username'], 'success': 0, 'total': account_apps})
                    continue
                    
                for app_name in account['apps']:
                    total_apps += 1
                    print(f"📋 处理应用: {app_name}")
                    
                    app_guid = client.get_app_guid(app_name, space_guid)
                    if not app_guid:
                        continue
                        
                    current_status = client.get_app_status(app_guid)
                    if current_status == "STARTED":
                        account_success += 1
                        total_success += 1
                        continue
                    
                    if client.start_application(app_guid, app_name):
                        if client.wait_for_app_start(app_guid, app_name):
                            account_success += 1
                            total_success += 1
                
                results.append({
                    'username': account['username'],
                    'success': account_success,
                    'total': account_apps
                })
            
            print(f"\n🎯 总完成情况: {total_success}/{total_apps} 个应用启动成功")
            telegram_notifier.send_result_notification(results)
            
            return 0 if total_success == total_apps else 1
        
        if __name__ == "__main__":
            exit(main())
        EOF
        
        # 给脚本添加执行权限
        chmod +x scripts/cf-autostart.py
        
        echo "✅ 脚本文件创建完成"

    - name: Run SAP BTP Auto Start
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        CF_USERNAME_1: ${{ secrets.CF_USERNAME_1 }}
        CF_PASSWORD_1: ${{ secrets.CF_PASSWORD_1 }}
        CF_ORG_1: ${{ secrets.CF_ORG_1 }}
        CF_APPS_1: ${{ secrets.CF_APPS_1 }}
        CF_USERNAME_2: ${{ secrets.CF_USERNAME_2 }}
        CF_PASSWORD_2: ${{ secrets.CF_PASSWORD_2 }}
        CF_ORG_2: ${{ secrets.CF_ORG_2 }}
        CF_APPS_2: ${{ secrets.CF_APPS_2 }}
      run: |
        cd scripts
        python cf-autostart.py

    - name: Send success notification
      if: success()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d chat_id="$TELEGRAM_CHAT_ID" \
          -d text="✅ <b>SAP BTP 启动成功！</b>%0A%0A⏰ 时间: $(date '+%Y-%m-%d %H:%M:%S')%0A📊 状态: 所有应用启动完成%0A%0A<code>下次执行: 明天 08:30</code>" \
          -d parse_mode="HTML" \
          -d disable_web_page_preview="true"

    - name: Send failure notification
      if: failure()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -d chat_id="$TELEGRAM_CHAT_ID" \
          -d text="❌ <b>SAP BTP 启动失败</b>%0A%0A📦 工作流: $GITHUB_WORKFLOW%0A🏷️ 运行ID: $GITHUB_RUN_ID%0A⏰ 时间: $(date '+%Y-%m-%d %H:%M:%S')%0A%0A🔍 查看 " \
          -d parse_mode="HTML" \
          -d disable_web_page_preview="true"
